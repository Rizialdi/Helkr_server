### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddJobberTagResponse {
  added: Boolean!
  max: Boolean!
}

type authorizedcategories {
  id: String!
  listofauthorizedcategories: Json
  userId: String
  utilisateur: utilisateur
}

type AuthPayload {
  token: String!
  user: utilisateur!
}

type avis {
  comment: String!
  createdAt: DateTime!
  id: String!
  offering: offering!
  score: Int!
  scored: utilisateur!
  scorer: utilisateur!
}

input avisWhereUniqueInput {
  id: String
}

type CandidateToOfferingSuccess {
  success: Boolean!
}

scalar DateTime

type demande {
  createdAt: DateTime!
  id: String!
  message: String!
  receivedById: String
  sentBy: utilisateur
  sentById: String
}

scalar Json

scalar JSON

type moyenne {
  id: String!
  moyenne: Float!
  userId: String!
  utilisateur: utilisateur!
}

type Mutation {
  addAuthorizedCategories(authorizedcategory: String!, id: String!): Boolean!
  addOffering(category: String!, description: String!, details: String!, referenceId: String!, type: String!): Boolean!
  addressUpdate(text: String!): Boolean!
  addVerificationpieces(id: String, listofpieces: String!, referenceId: String!): Boolean!
  avatarUpload(file: uploadImageType): Boolean!
  candidateToOffering(id: String!, message: String!, priceRange: String!): CandidateToOfferingSuccess!
  chooseCandidate(candidateId: String!, id: String!, preferreddays: [String!]!): Boolean!
  chooseEventDay(id: String!, timestamp: String!): Boolean!
  completeOffering(completedById: String!, id: String!): Boolean!
  createAvis(comment: String!, offeringId: String!, score: Int!, scoredId: String!): Boolean!
  createDemande(message: String!, recipient: String!): Boolean!
  deleteOffering(id: String!): Boolean!
  descriptionUpdate(text: String!): Boolean!
  notificationsTokenUpdate(token: String!): Boolean!
  registerUser(address: String!, nom: String!, numero: String!, prenom: String!): AuthPayload!
  removeAuthorizedCategories(id: String!, referenceId: String!): Boolean!
  statusChangeToDenyAuthorization(id: String!, referenceId: String!): Boolean!
  tagsAddJobber(tag: String!): AddJobberTagResponse!
  tagsUpdate(tags: [String!]!): Boolean!
  updateOffering(description: String!, id: String!): Boolean!
}

type notificationstoken {
  id: String!
  token: String
  userid: String
  utilisateur: utilisateur
}

type offering {
  author: utilisateur!
  avis(after: avisWhereUniqueInput, before: avisWhereUniqueInput, first: Int, last: Int): [avis!]!
  candidates(after: utilisateurWhereUniqueInput, before: utilisateurWhereUniqueInput, first: Int, last: Int): [utilisateur!]!
  category: String!
  completed: Boolean!
  createdAt: DateTime!
  description: String!
  details: JSON!
  eventday: String
  id: String!
  preferreddays: [String!]!
  referenceId: String
  selectedCandidate: utilisateur
  status: String
  type: String!
  updatedAt: DateTime!
}

input offeringWhereUniqueInput {
  id: String
}

type propositionToOffering {
  candidateUsername: String!
  descriptionPrestataire: String
  message: String!
  priceRange: String!
}

type Query {
  allOfferings(filters: [String!]!): [offering!]!
  allUsersToken: [notificationstoken!]!
  AUTH_STEP_ONE(numero: String!): STEP_ONE_RESPONSE!
  AUTH_STEP_TWO(id: String!, numero: String!, token: String!): STEP_TWO_RESPONSE!
  demandes: [demande!]!
  demandesenvoyees: [demande!]!
  demandesrecues: [demande!]!
  getAuthorizedCategories(id: String): authorizedcategories!
  getAvisUser(userId: String!): [avis!]!
  getSendVerificationPiecesReferenceIdsAndStatus(id: String): String!
  getUserInfo(numero: String!): AuthPayload!
  getUserStats(id: String!): Stats!
  getVerificationPieces(id: String): verificationpieces!
  incompleteOfferings(filters: [String!]!): [offering!]!
  isCandidateTo: [offering!]!
  myIncompleteOffering: [offering!]!
  myIncompleteOfferingWithCandidates: [offering!]!
  offeringById(id: String!): offering!
  offeringsUser(numero: String!): [offering!]!
  propositionToOfferingDetails(offeringId: String!, userId: String!): propositionToOffering!
  userById(id: String!): utilisateur
  users: [utilisateur!]!
}

input ReferenceidUserIdIdCompoundUniqueInput {
  id: String!
  referenceid: String!
  userId: String!
}

type Stats {
  average: Float!
  done: Int!
  proposed: Int!
}

type STEP_ONE_RESPONSE {
  id: String!
  status: String!
}

type STEP_TWO_RESPONSE {
  id: String
  nom: String
  prenom: String
  success: Boolean!
  token: String
}

type Subscription {
  newAvis(userId: String!): avis!
  newDemande(recipientId: String!): demande!
  onOfferingAdded(tags: [String!]!): offering!
  updateAppliedTo(userId: String!): updateAppliedToType!
  updatedEventDay(userId: String!): updateSelectedEventDay!
}

type tags {
  id: String!
  tags: String!
  userid: String
  utilisateur: utilisateur
}

type updateAppliedToType {
  id: String!
  status: String!
}

type updateSelectedEventDay {
  eventday: String!
  offeringId: String!
}

input uploadImageType {
  name: String!
  type: String!
  uri: String!
}

type utilisateur {
  address: String
  avatar: String
  avisgave(after: avisWhereUniqueInput, before: avisWhereUniqueInput, first: Int, last: Int): [avis!]!
  avisreceived(after: avisWhereUniqueInput, before: avisWhereUniqueInput, first: Int, last: Int): [avis!]!
  completedofferings(after: offeringWhereUniqueInput, before: offeringWhereUniqueInput, first: Int, last: Int): [offering!]!
  description: String
  id: String!
  moyenne: Int!
  nom: String!
  numero: String!
  offerings(after: offeringWhereUniqueInput, before: offeringWhereUniqueInput, first: Int, last: Int): [offering!]!
  prenom: String!
  professional: Boolean!
  tags: [String!]
  verificationpieces(after: verificationpiecesWhereUniqueInput, before: verificationpiecesWhereUniqueInput, first: Int, last: Int): [verificationpieces!]!
  verified: Boolean!
}

input utilisateurWhereUniqueInput {
  id: String
  numero: String
}

type verificationpieces {
  id: String!
  listofpieces: Json
  referenceid: String!
  status: String
  userId: String!
  utilisateur: utilisateur!
}

input verificationpiecesWhereUniqueInput {
  referenceid_userId_id: ReferenceidUserIdIdCompoundUniqueInput
  userId: String
}
