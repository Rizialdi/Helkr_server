### This file was generated by Nexus Schema
### Do not make changes to this file directly


type authorizedcategories {
  id: String!
  listofauthorizedcategories: Json
  userId: String
  utilisateur: utilisateur
}

type AuthPayload {
  token: String!
  user: utilisateur!
}

type avis {
  comment: String!
  createdAt: DateTime!
  id: String!
  offering: offering!
  score: Int!
  scored: utilisateur!
  scorer: utilisateur!
}

input avisWhereUniqueInput {
  id: String
}

type CandidateToOfferingSuccess {
  success: Boolean!
}

type channel {
  createdAt: DateTime!
  id: String!
  messages(after: messageWhereUniqueInput, before: messageWhereUniqueInput, first: Int, last: Int): [message!]!
  users(after: utilisateurWhereUniqueInput, before: utilisateurWhereUniqueInput, first: Int, last: Int): [utilisateur!]!
}

input channelWhereUniqueInput {
  id: String
}

type createChannel {
  channel: channel!
  success: Boolean!
}

scalar DateTime

scalar Json

scalar JSON

type message {
  channel: channel
  channelId: String
  createdAt: DateTime!
  id: String!
  sentById: String
  text: String!
}

input messageWhereUniqueInput {
  id: String
}

type moyenne {
  id: String!
  moyenne: Float!
  userId: String!
  utilisateur: utilisateur!
}

type Mutation {
  addAuthorizedCategories(authorizedcategory: String!, id: String): Boolean!
  addOffering(category: String!, description: String!, details: String!, referenceId: String!, type: String!): Boolean!
  addressUpdate(text: String!): Boolean!
  addVerificationpieces(id: String, listofpieces: String!, referenceId: String!): Boolean!
  avatarUpload(file: String!): Boolean!
  candidateToOffering(id: String!): CandidateToOfferingSuccess!
  chooseCandidate(candidateId: String!, id: String!): Boolean!
  chooseEventDay(id: String!, timestamp: String!): Boolean!
  completeOffering(completedById: String!, id: String!): Boolean!
  createAvis(comment: String!, offeringId: String!, score: Int!, scoredId: String!): Boolean!
  createChannel(recipient: String!): createChannel!
  createMessage(channelId: String, recipient: String, text: String!): Boolean!
  deleteOffering(id: String!): Boolean!
  descriptionUpdate(text: String!): Boolean!
  registerUser(nom: String!, numero: String!, prenom: String!): AuthPayload!
  removeAuthorizedCategories(id: String, referenceId: String!): Boolean!
  tagsUpdate(tags: [String!]!): Boolean!
  updateOffering(description: String!, id: String!): Boolean!
}

type offering {
  author: utilisateur!
  avis(after: avisWhereUniqueInput, before: avisWhereUniqueInput, first: Int, last: Int): [avis!]!
  candidates(after: utilisateurWhereUniqueInput, before: utilisateurWhereUniqueInput, first: Int, last: Int): [utilisateur!]!
  category: String!
  createdAt: DateTime!
  description: String!
  details: JSON!
  eventday: String
  id: String!
  preferreddays: [String!]!
  referenceId: String
  selectedCandidate: utilisateur
  status: String
  type: String!
  updatedAt: DateTime!
}

input offeringWhereUniqueInput {
  id: String
}

type Query {
  allChatsAndMessages: [channel!]!
  allOfferings(filters: [String!]): [offering!]!
  channel(id: String!): channel!
  channels: [channel!]!
  getAuthorizedCategories(id: String): authorizedcategories!
  getAvisUser(userId: String!): [avis!]!
  getSendVerificationPiecesReferenceIdsAndStatus(id: String): String!
  getUserInfo(numero: String!): AuthPayload!
  getUserStats(id: String!): Stats!
  getVerificationPieces(id: String): verificationpieces!
  incompleteOfferings(filters: [String!]): [offering!]!
  isCandidateTo: [offering!]!
  messages: [message!]!
  myIncompleteOffering: [offering!]!
  myIncompleteOfferingWithCandidates: [offering!]!
  offeringById(id: String!): offering!
  offeringsUser(numero: String!): [offering!]!
  userById(id: String!): utilisateur!
  users: [utilisateur!]!
}

input ReferenceidUserIdIdCompoundUniqueInput {
  id: String!
  referenceid: String!
  userId: String!
}

type Stats {
  average: Float!
  done: Int!
  proposed: Int!
}

type Subscription {
  newAvis(userId: String!): avis!
  newChannel(userId: String!): channel!
  newMessage(channelIds: [String!]!): message!
  onOfferingAdded(tags: [String!]): offering!
  updateAppliedTo(userId: String!): updateAppliedToType!
}

type updateAppliedToType {
  id: String!
  status: String!
}

type utilisateur {
  address: String
  avatar: String
  avisgave(after: avisWhereUniqueInput, before: avisWhereUniqueInput, first: Int, last: Int): [avis!]!
  avisreceived(after: avisWhereUniqueInput, before: avisWhereUniqueInput, first: Int, last: Int): [avis!]!
  channels(after: channelWhereUniqueInput, before: channelWhereUniqueInput, first: Int, last: Int): [channel!]!
  completedofferings(after: offeringWhereUniqueInput, before: offeringWhereUniqueInput, first: Int, last: Int): [offering!]!
  description: String
  id: String!
  messages(after: messageWhereUniqueInput, before: messageWhereUniqueInput, first: Int, last: Int): [message!]!
  moyenne: Int!
  nom: String!
  numero: String!
  offerings(after: offeringWhereUniqueInput, before: offeringWhereUniqueInput, first: Int, last: Int): [offering!]!
  prenom: String!
  professional: Boolean!
  tags: [String!]!
  verificationpieces(after: verificationpiecesWhereUniqueInput, before: verificationpiecesWhereUniqueInput, first: Int, last: Int): [verificationpieces!]!
  verified: Boolean!
}

input utilisateurWhereUniqueInput {
  id: String
  numero: String
}

type verificationpieces {
  id: String!
  listofpieces: Json
  referenceid: String!
  status: String
  userId: String!
  utilisateur: utilisateur!
}

input verificationpiecesWhereUniqueInput {
  referenceid_userId_id: ReferenceidUserIdIdCompoundUniqueInput
  userId: String
}
