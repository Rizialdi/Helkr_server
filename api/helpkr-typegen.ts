/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./context"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    json<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  avisWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  channelWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  messageWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  offeringWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  utilisateurWhereUniqueInput: { // input type
    id?: string | null; // String
    numero?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['utilisateur']; // utilisateur!
  }
  CandidateToOfferingSuccess: { // root type
    success: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  Stats: { // root type
    average: number; // Float!
    done: number; // Int!
    proposed: number; // Int!
  }
  Subscription: {};
  avis: { // root type
    comment: string; // String!
    createdAt: any; // DateTime!
    id: string; // String!
    score: number; // Int!
  }
  channel: { // root type
    createdAt: any; // DateTime!
    id: string; // String!
  }
  createChannel: { // root type
    channel: NexusGenRootTypes['channel']; // channel!
    success: boolean; // Boolean!
  }
  message: { // root type
    createdAt: any; // DateTime!
    id: string; // String!
    sentById?: string | null; // String
    text: string; // String!
  }
  moyenne: { // root type
    id: string; // String!
    moyenne: number; // Float!
    userId: string; // String!
  }
  offering: { // root type
    category: string; // String!
    createdAt: any; // DateTime!
    description: string; // String!
    id: string; // String!
    status?: string | null; // String
    type: string; // String!
  }
  updateAppliedToType: { // root type
    id: string; // String!
    status: string; // String!
  }
  utilisateur: { // root type
    address?: string | null; // String
    avatar?: string | null; // String
    description?: string | null; // String
    id: string; // String!
    nom: string; // String!
    numero: string; // String!
    prenom: string; // String!
    professional: boolean; // Boolean!
    tags: string[]; // [String!]!
    verified: boolean; // Boolean!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  JSON: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  avisWhereUniqueInput: NexusGenInputs['avisWhereUniqueInput'];
  channelWhereUniqueInput: NexusGenInputs['channelWhereUniqueInput'];
  messageWhereUniqueInput: NexusGenInputs['messageWhereUniqueInput'];
  offeringWhereUniqueInput: NexusGenInputs['offeringWhereUniqueInput'];
  utilisateurWhereUniqueInput: NexusGenInputs['utilisateurWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['utilisateur']; // utilisateur!
  }
  CandidateToOfferingSuccess: { // field return type
    success: boolean; // Boolean!
  }
  Mutation: { // field return type
    addOffering: boolean; // Boolean!
    addressUpdate: boolean; // Boolean!
    avatarUpload: boolean; // Boolean!
    candidateToOffering: NexusGenRootTypes['CandidateToOfferingSuccess']; // CandidateToOfferingSuccess!
    chooseCandidate: boolean; // Boolean!
    completeOffering: boolean; // Boolean!
    createAvis: boolean; // Boolean!
    createChannel: NexusGenRootTypes['createChannel']; // createChannel!
    createMessage: boolean; // Boolean!
    deleteOffering: boolean; // Boolean!
    descriptionUpdate: boolean; // Boolean!
    registerUser: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    tagsUpdate: boolean; // Boolean!
    updateOffering: boolean; // Boolean!
  }
  Query: { // field return type
    channel: NexusGenRootTypes['channel']; // channel!
    channels: NexusGenRootTypes['channel'][]; // [channel!]!
    getAvisUser: NexusGenRootTypes['avis'][]; // [avis!]!
    getUserInfo: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    getUserStats: NexusGenRootTypes['Stats']; // Stats!
    incompleteOfferings: NexusGenRootTypes['offering'][]; // [offering!]!
    isCandidateTo: NexusGenRootTypes['offering'][]; // [offering!]!
    messages: NexusGenRootTypes['message'][]; // [message!]!
    myIncompleteOffering: NexusGenRootTypes['offering'][]; // [offering!]!
    myIncompleteOfferingWithCandidates: NexusGenRootTypes['offering'][]; // [offering!]!
    offeringById: NexusGenRootTypes['offering']; // offering!
    offeringsUser: NexusGenRootTypes['offering'][]; // [offering!]!
    userById: NexusGenRootTypes['utilisateur']; // utilisateur!
    users: NexusGenRootTypes['utilisateur'][]; // [utilisateur!]!
  }
  Stats: { // field return type
    average: number; // Float!
    done: number; // Int!
    proposed: number; // Int!
  }
  Subscription: { // field return type
    newAvis: NexusGenRootTypes['avis']; // avis!
    newMessage: NexusGenRootTypes['message']; // message!
    onOfferingAdded: NexusGenRootTypes['offering']; // offering!
    updateAppliedTo: NexusGenRootTypes['updateAppliedToType']; // updateAppliedToType!
  }
  avis: { // field return type
    comment: string; // String!
    createdAt: any; // DateTime!
    id: string; // String!
    offering: NexusGenRootTypes['offering']; // offering!
    score: number; // Int!
    scored: NexusGenRootTypes['utilisateur']; // utilisateur!
    scorer: NexusGenRootTypes['utilisateur']; // utilisateur!
  }
  channel: { // field return type
    createdAt: any; // DateTime!
    id: string; // String!
    messages: NexusGenRootTypes['message'][]; // [message!]!
    users: NexusGenRootTypes['utilisateur'][]; // [utilisateur!]!
  }
  createChannel: { // field return type
    channel: NexusGenRootTypes['channel']; // channel!
    success: boolean; // Boolean!
  }
  message: { // field return type
    channel: NexusGenRootTypes['channel'] | null; // channel
    createdAt: any; // DateTime!
    id: string; // String!
    sentById: string | null; // String
    text: string; // String!
  }
  moyenne: { // field return type
    id: string; // String!
    moyenne: number; // Float!
    userId: string; // String!
    utilisateur: NexusGenRootTypes['utilisateur']; // utilisateur!
  }
  offering: { // field return type
    author: NexusGenRootTypes['utilisateur']; // utilisateur!
    avis: NexusGenRootTypes['avis'][]; // [avis!]!
    candidates: NexusGenRootTypes['utilisateur'][]; // [utilisateur!]!
    category: string; // String!
    createdAt: any; // DateTime!
    description: string; // String!
    details: any; // JSON!
    id: string; // String!
    selectedCandidate: NexusGenRootTypes['utilisateur'] | null; // utilisateur
    status: string | null; // String
    type: string; // String!
  }
  updateAppliedToType: { // field return type
    id: string; // String!
    status: string; // String!
  }
  utilisateur: { // field return type
    address: string | null; // String
    avatar: string | null; // String
    avisgave: NexusGenRootTypes['avis'][]; // [avis!]!
    avisreceived: NexusGenRootTypes['avis'][]; // [avis!]!
    channels: NexusGenRootTypes['channel'][]; // [channel!]!
    completedofferings: NexusGenRootTypes['offering'][]; // [offering!]!
    description: string | null; // String
    id: string; // String!
    messages: NexusGenRootTypes['message'][]; // [message!]!
    moyenne: number; // Int!
    nom: string; // String!
    numero: string; // String!
    offering: NexusGenRootTypes['offering'][]; // [offering!]!
    offerings: NexusGenRootTypes['offering'][]; // [offering!]!
    prenom: string; // String!
    professional: boolean; // Boolean!
    tags: string[]; // [String!]!
    verified: boolean; // Boolean!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addOffering: { // args
      category: string; // String!
      description: string; // String!
      details: string; // String!
      type: string; // String!
    }
    addressUpdate: { // args
      text: string; // String!
    }
    avatarUpload: { // args
      file: string; // String!
    }
    candidateToOffering: { // args
      id: string; // String!
    }
    chooseCandidate: { // args
      candidateId: string; // String!
      id: string; // String!
    }
    completeOffering: { // args
      completedById: string; // String!
      id: string; // String!
    }
    createAvis: { // args
      comment: string; // String!
      offeringId: string; // String!
      score: number; // Int!
      scoredId: string; // String!
    }
    createChannel: { // args
      recipient: string; // String!
    }
    createMessage: { // args
      channelId?: string | null; // String
      recipient?: string | null; // String
      text: string; // String!
    }
    deleteOffering: { // args
      id: string; // String!
    }
    descriptionUpdate: { // args
      text: string; // String!
    }
    registerUser: { // args
      nom: string; // String!
      numero: string; // String!
      prenom: string; // String!
    }
    tagsUpdate: { // args
      tags: string[]; // [String!]!
    }
    updateOffering: { // args
      description: string; // String!
      id: string; // String!
    }
  }
  Query: {
    channel: { // args
      id: string; // String!
    }
    getAvisUser: { // args
      userId: string; // String!
    }
    getUserInfo: { // args
      numero: string; // String!
    }
    getUserStats: { // args
      id: string; // String!
    }
    incompleteOfferings: { // args
      filters?: string[] | null; // [String!]
    }
    offeringById: { // args
      id: string; // String!
    }
    offeringsUser: { // args
      numero: string; // String!
    }
    userById: { // args
      id: string; // String!
    }
  }
  Subscription: {
    newAvis: { // args
      userId: string; // String!
    }
    newMessage: { // args
      channelId: string; // String!
    }
    onOfferingAdded: { // args
      tags?: string[] | null; // [String!]
    }
    updateAppliedTo: { // args
      userId: string; // String!
    }
  }
  channel: {
    messages: { // args
      after?: NexusGenInputs['messageWhereUniqueInput'] | null; // messageWhereUniqueInput
      before?: NexusGenInputs['messageWhereUniqueInput'] | null; // messageWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    users: { // args
      after?: NexusGenInputs['utilisateurWhereUniqueInput'] | null; // utilisateurWhereUniqueInput
      before?: NexusGenInputs['utilisateurWhereUniqueInput'] | null; // utilisateurWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  offering: {
    avis: { // args
      after?: NexusGenInputs['avisWhereUniqueInput'] | null; // avisWhereUniqueInput
      before?: NexusGenInputs['avisWhereUniqueInput'] | null; // avisWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    candidates: { // args
      after?: NexusGenInputs['utilisateurWhereUniqueInput'] | null; // utilisateurWhereUniqueInput
      before?: NexusGenInputs['utilisateurWhereUniqueInput'] | null; // utilisateurWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  utilisateur: {
    avisgave: { // args
      after?: NexusGenInputs['avisWhereUniqueInput'] | null; // avisWhereUniqueInput
      before?: NexusGenInputs['avisWhereUniqueInput'] | null; // avisWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    avisreceived: { // args
      after?: NexusGenInputs['avisWhereUniqueInput'] | null; // avisWhereUniqueInput
      before?: NexusGenInputs['avisWhereUniqueInput'] | null; // avisWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    channels: { // args
      after?: NexusGenInputs['channelWhereUniqueInput'] | null; // channelWhereUniqueInput
      before?: NexusGenInputs['channelWhereUniqueInput'] | null; // channelWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    completedofferings: { // args
      after?: NexusGenInputs['offeringWhereUniqueInput'] | null; // offeringWhereUniqueInput
      before?: NexusGenInputs['offeringWhereUniqueInput'] | null; // offeringWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    messages: { // args
      after?: NexusGenInputs['messageWhereUniqueInput'] | null; // messageWhereUniqueInput
      before?: NexusGenInputs['messageWhereUniqueInput'] | null; // messageWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    offering: { // args
      after?: NexusGenInputs['offeringWhereUniqueInput'] | null; // offeringWhereUniqueInput
      before?: NexusGenInputs['offeringWhereUniqueInput'] | null; // offeringWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    offerings: { // args
      after?: NexusGenInputs['offeringWhereUniqueInput'] | null; // offeringWhereUniqueInput
      before?: NexusGenInputs['offeringWhereUniqueInput'] | null; // offeringWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "CandidateToOfferingSuccess" | "Mutation" | "Query" | "Stats" | "Subscription" | "avis" | "channel" | "createChannel" | "message" | "moyenne" | "offering" | "updateAppliedToType" | "utilisateur";

export type NexusGenInputNames = "avisWhereUniqueInput" | "channelWhereUniqueInput" | "messageWhereUniqueInput" | "offeringWhereUniqueInput" | "utilisateurWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "JSON" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}