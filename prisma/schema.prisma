generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model utilisateur {
  id                 String     @default(cuid()) @id
  nom                String
  avatar             String?
  professional       Boolean    @default(false)
  verified           Boolean    @default(false)
  prenom             String
  tags               String[]
  description        String?
  address            String?
  numero             String     @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  channels           channel[]
  offerings          offering[] @relation("offering")
  completedofferings offering[] @relation("completedoffering")
  avisreceived       avis[]     @relation("avisreceived")
  avisgave           avis[]     @relation("avisgave")
  messages           message[]
  moyenne            moyenne?
  appliedTo          offering[] @relation("appliedoffering", references: [id])
  offering           offering[]
}

model offering {
  id                  String        @default(cuid()) @id
  type                String
  category            String
  description         String
  details             Json
  candidates          utilisateur[] @relation("appliedoffering", references: [id])
  selectedCandidateId String?       @map("selectedCandidate")
  selectedCandidate   utilisateur?  @relation(fields: [selectedCandidateId], references: [id])
  authorId            String        @map("author")
  author              utilisateur   @relation("offering", fields: [authorId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  completed           Boolean       @default(false)
  completedById       String?       @map("completedBy")
  completedBy         utilisateur?  @relation("completedoffering", fields: [completedById], references: [id])
  avis                avis[]
}

model avis {
  id         String      @default(cuid()) @id
  score      Int
  comment    String
  offeringId String      @map("offering")
  offering   offering    @relation(fields: [offeringId], references: [id])
  scorerId   String      @map("scorer")
  scorer     utilisateur @relation("avisgave", fields: [scorerId], references: [id])
  scoredId   String      @map("scored")
  scored     utilisateur @relation("avisreceived", fields: [scoredId], references: [id])
  createdAt  DateTime    @default(now())
}

model channel {
  id        String        @default(cuid()) @id
  users     utilisateur[] @relation(references: [id])
  messages  message[]
  createdAt DateTime      @default(now())
}

model message {
  id        String       @default(cuid()) @id
  text      String
  sentById  String?      @map("sentBy")
  sentBy    utilisateur? @relation(fields: [sentById], references: [id])
  channelId String?      @map("channel")
  channel   channel?     @relation(fields: [channelId], references: [id])
  createdAt DateTime     @default(now())
}

model moyenne {
  id          String      @default(cuid()) @id
  userId      String      @map("utilisateur")
  utilisateur utilisateur @relation(fields: [userId], references: [id])
  moyenne     Float
  realMoyenne Float
}
