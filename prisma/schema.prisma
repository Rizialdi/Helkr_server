generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authorizedcategories {
  id                         String       @id @default(cuid())
  listofauthorizedcategories Json?
  userId                     String?      @unique @map("utilisateur")
  utilisateur                utilisateur? @relation(fields: [userId], references: [id])
}

model avis {
  comment    String
  createdAt  DateTime    @default(now())
  id         String      @id @default(cuid())
  offeringId String      @map("offering")
  score      Int
  scoredId   String      @map("scored")
  scorerId   String      @map("scorer")
  offering   offering    @relation(fields: [offeringId], references: [id])
  scored     utilisateur @relation("avisreceived", fields: [scoredId], references: [id])
  scorer     utilisateur @relation("avisgave", fields: [scorerId], references: [id])
}

model channel {
  createdAt DateTime      @default(now())
  id        String        @id @default(cuid())
  messages  message[]
  users     utilisateur[] @relation(references: [id])
}

model message {
  channelId String?      @map("channel")
  createdAt DateTime     @default(now())
  id        String       @id @default(cuid())
  sentById  String?      @map("sentBy")
  text      String
  channel   channel?     @relation(fields: [channelId], references: [id])
  sentBy    utilisateur? @relation(fields: [sentById], references: [id])
}

model moyenne {
  id          String      @id @default(cuid())
  moyenne     Float
  realMoyenne Float
  userId      String      @map("utilisateur")
  utilisateur utilisateur @relation(fields: [userId], references: [id])
}

model notificationstoken {
  id          String       @id @default(cuid())
  token       String?
  userid      String?      @unique
  utilisateur utilisateur? @relation(fields: [userid], references: [id])
}

model offering {
  authorId              String                  @map("author")
  category              String
  completed             Boolean                 @default(false)
  completedById         String?                 @map("completedBy")
  createdAt             DateTime                @default(now())
  description           String
  details               Json
  eventday              String?
  id                    String                  @id @default(cuid())
  preferreddays         String[]
  referenceid           String?
  selectedCandidateId   String?                 @map("selectedCandidate")
  type                  String
  updatedAt             DateTime                @updatedAt
  author                utilisateur             @relation("offering_authorToutilisateur", fields: [authorId], references: [id])
  completedBy           utilisateur?            @relation("offering_completedByToutilisateur", fields: [completedById], references: [id])
  selectedCandidate     utilisateur?            @relation("offering_selectedCandidateToutilisateur", fields: [selectedCandidateId], references: [id])
  avis                  avis[]
  candidates            utilisateur[]           @relation("appliedoffering", references: [id])
  propositiontooffering propositiontooffering[]
}

model utilisateur {
  address               String?
  avatar                String?
  createdAt             DateTime                @default(now())
  description           String?
  id                    String                  @id @default(cuid())
  jobauthorization      String?
  mobilemoneyaccount    String?
  nom                   String
  numero                String                  @unique
  prenom                String
  professional          Boolean                 @default(false)
  tags                  tags?
  updatedAt             DateTime                @updatedAt
  verified              Boolean                 @default(false)
  avisreceived          avis[]                  @relation("avisreceived")
  avisgave              avis[]                  @relation("avisgave")
  messages              message[]
  moyenne               moyenne?
  offerings             offering[]              @relation("offering_authorToutilisateur")
  completedofferings    offering[]              @relation("offering_completedByToutilisateur")
  acceptedToOffering    offering[]              @relation("offering_selectedCandidateToutilisateur")
  appliedTo             offering[]              @relation("appliedoffering", references: [id])
  channels              channel[]               @relation(references: [id])
  verificationpieces    verificationpieces[]
  authorizedcategories  authorizedcategories?
  notificationstoken    notificationstoken?
  propositiontooffering propositiontooffering[]
}

model tags {
  id          String       @id @default(cuid())
  tags        String
  userid      String?      @unique
  utilisateur utilisateur? @relation(fields: [userid], references: [id])
}

model verificationpieces {
  createdAt    DateTime    @default(now())
  id           String      @default(cuid())
  listofpieces Json?
  referenceid  String
  status       String?     @default("enattente")
  userId       String      @unique @map("utilisateur")
  utilisateur  utilisateur @relation(fields: [userId], references: [id])

  @@id([referenceid, userId, id])
}

model propositiontooffering {
  message       String
  priceRange    String
  offeringId    String
  utilisateurId String
  offering      offering    @relation(fields: [offeringId], references: [id])
  utilisateur   utilisateur @relation(fields: [utilisateurId], references: [id])

  @@id([offeringId, utilisateurId])
}
