// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  offering: (where?: OfferingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  offering: (where: OfferingWhereUniqueInput) => OfferingNullablePromise;
  offerings: (args?: {
    where?: OfferingWhereInput;
    orderBy?: OfferingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Offering>;
  offeringsConnection: (args?: {
    where?: OfferingWhereInput;
    orderBy?: OfferingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OfferingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOffering: (data: OfferingCreateInput) => OfferingPromise;
  updateOffering: (args: {
    data: OfferingUpdateInput;
    where: OfferingWhereUniqueInput;
  }) => OfferingPromise;
  updateManyOfferings: (args: {
    data: OfferingUpdateManyMutationInput;
    where?: OfferingWhereInput;
  }) => BatchPayloadPromise;
  upsertOffering: (args: {
    where: OfferingWhereUniqueInput;
    create: OfferingCreateInput;
    update: OfferingUpdateInput;
  }) => OfferingPromise;
  deleteOffering: (where: OfferingWhereUniqueInput) => OfferingPromise;
  deleteManyOfferings: (where?: OfferingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  offering: (
    where?: OfferingSubscriptionWhereInput
  ) => OfferingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OfferingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "category_ASC"
  | "category_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nom_ASC"
  | "nom_DESC"
  | "prenom_ASC"
  | "prenom_DESC"
  | "numero_ASC"
  | "numero_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type OfferingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OfferingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OfferingWhereInput[] | OfferingWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nom?: Maybe<String>;
  nom_not?: Maybe<String>;
  nom_in?: Maybe<String[] | String>;
  nom_not_in?: Maybe<String[] | String>;
  nom_lt?: Maybe<String>;
  nom_lte?: Maybe<String>;
  nom_gt?: Maybe<String>;
  nom_gte?: Maybe<String>;
  nom_contains?: Maybe<String>;
  nom_not_contains?: Maybe<String>;
  nom_starts_with?: Maybe<String>;
  nom_not_starts_with?: Maybe<String>;
  nom_ends_with?: Maybe<String>;
  nom_not_ends_with?: Maybe<String>;
  prenom?: Maybe<String>;
  prenom_not?: Maybe<String>;
  prenom_in?: Maybe<String[] | String>;
  prenom_not_in?: Maybe<String[] | String>;
  prenom_lt?: Maybe<String>;
  prenom_lte?: Maybe<String>;
  prenom_gt?: Maybe<String>;
  prenom_gte?: Maybe<String>;
  prenom_contains?: Maybe<String>;
  prenom_not_contains?: Maybe<String>;
  prenom_starts_with?: Maybe<String>;
  prenom_not_starts_with?: Maybe<String>;
  prenom_ends_with?: Maybe<String>;
  prenom_not_ends_with?: Maybe<String>;
  numero?: Maybe<String>;
  numero_not?: Maybe<String>;
  numero_in?: Maybe<String[] | String>;
  numero_not_in?: Maybe<String[] | String>;
  numero_lt?: Maybe<String>;
  numero_lte?: Maybe<String>;
  numero_gt?: Maybe<String>;
  numero_gte?: Maybe<String>;
  numero_contains?: Maybe<String>;
  numero_not_contains?: Maybe<String>;
  numero_starts_with?: Maybe<String>;
  numero_not_starts_with?: Maybe<String>;
  numero_ends_with?: Maybe<String>;
  numero_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  offerings_some?: Maybe<OfferingWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  numero?: Maybe<String>;
}>;

export interface OfferingCreateInput {
  id?: Maybe<ID_Input>;
  type: String;
  category: String;
  description: String;
  author: UserCreateOneWithoutOfferingsInput;
}

export interface UserCreateOneWithoutOfferingsInput {
  create?: Maybe<UserCreateWithoutOfferingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOfferingsInput {
  id?: Maybe<ID_Input>;
  nom: String;
  prenom: String;
  numero: String;
}

export interface OfferingUpdateInput {
  type?: Maybe<String>;
  category?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutOfferingsInput>;
}

export interface UserUpdateOneRequiredWithoutOfferingsInput {
  create?: Maybe<UserCreateWithoutOfferingsInput>;
  update?: Maybe<UserUpdateWithoutOfferingsDataInput>;
  upsert?: Maybe<UserUpsertWithoutOfferingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOfferingsDataInput {
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  numero?: Maybe<String>;
}

export interface UserUpsertWithoutOfferingsInput {
  update: UserUpdateWithoutOfferingsDataInput;
  create: UserCreateWithoutOfferingsInput;
}

export interface OfferingUpdateManyMutationInput {
  type?: Maybe<String>;
  category?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  nom: String;
  prenom: String;
  numero: String;
  offerings?: Maybe<OfferingCreateManyWithoutAuthorInput>;
}

export interface OfferingCreateManyWithoutAuthorInput {
  create?: Maybe<
    OfferingCreateWithoutAuthorInput[] | OfferingCreateWithoutAuthorInput
  >;
  connect?: Maybe<OfferingWhereUniqueInput[] | OfferingWhereUniqueInput>;
}

export interface OfferingCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  type: String;
  category: String;
  description: String;
}

export interface UserUpdateInput {
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  numero?: Maybe<String>;
  offerings?: Maybe<OfferingUpdateManyWithoutAuthorInput>;
}

export interface OfferingUpdateManyWithoutAuthorInput {
  create?: Maybe<
    OfferingCreateWithoutAuthorInput[] | OfferingCreateWithoutAuthorInput
  >;
  delete?: Maybe<OfferingWhereUniqueInput[] | OfferingWhereUniqueInput>;
  connect?: Maybe<OfferingWhereUniqueInput[] | OfferingWhereUniqueInput>;
  set?: Maybe<OfferingWhereUniqueInput[] | OfferingWhereUniqueInput>;
  disconnect?: Maybe<OfferingWhereUniqueInput[] | OfferingWhereUniqueInput>;
  update?: Maybe<
    | OfferingUpdateWithWhereUniqueWithoutAuthorInput[]
    | OfferingUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | OfferingUpsertWithWhereUniqueWithoutAuthorInput[]
    | OfferingUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<OfferingScalarWhereInput[] | OfferingScalarWhereInput>;
  updateMany?: Maybe<
    | OfferingUpdateManyWithWhereNestedInput[]
    | OfferingUpdateManyWithWhereNestedInput
  >;
}

export interface OfferingUpdateWithWhereUniqueWithoutAuthorInput {
  where: OfferingWhereUniqueInput;
  data: OfferingUpdateWithoutAuthorDataInput;
}

export interface OfferingUpdateWithoutAuthorDataInput {
  type?: Maybe<String>;
  category?: Maybe<String>;
  description?: Maybe<String>;
}

export interface OfferingUpsertWithWhereUniqueWithoutAuthorInput {
  where: OfferingWhereUniqueInput;
  update: OfferingUpdateWithoutAuthorDataInput;
  create: OfferingCreateWithoutAuthorInput;
}

export interface OfferingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OfferingScalarWhereInput[] | OfferingScalarWhereInput>;
  OR?: Maybe<OfferingScalarWhereInput[] | OfferingScalarWhereInput>;
  NOT?: Maybe<OfferingScalarWhereInput[] | OfferingScalarWhereInput>;
}

export interface OfferingUpdateManyWithWhereNestedInput {
  where: OfferingScalarWhereInput;
  data: OfferingUpdateManyDataInput;
}

export interface OfferingUpdateManyDataInput {
  type?: Maybe<String>;
  category?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  nom?: Maybe<String>;
  prenom?: Maybe<String>;
  numero?: Maybe<String>;
}

export interface OfferingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OfferingWhereInput>;
  AND?: Maybe<
    OfferingSubscriptionWhereInput[] | OfferingSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Offering {
  id: ID_Output;
  type: String;
  category: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OfferingPromise extends Promise<Offering>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  category: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OfferingSubscription
  extends Promise<AsyncIterator<Offering>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OfferingNullablePromise
  extends Promise<Offering | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  category: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  nom: String;
  prenom: String;
  numero: String;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  nom: () => Promise<String>;
  prenom: () => Promise<String>;
  numero: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  offerings: <T = FragmentableArray<Offering>>(args?: {
    where?: OfferingWhereInput;
    orderBy?: OfferingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nom: () => Promise<AsyncIterator<String>>;
  prenom: () => Promise<AsyncIterator<String>>;
  numero: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  offerings: <T = Promise<AsyncIterator<OfferingSubscription>>>(args?: {
    where?: OfferingWhereInput;
    orderBy?: OfferingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nom: () => Promise<String>;
  prenom: () => Promise<String>;
  numero: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  offerings: <T = FragmentableArray<Offering>>(args?: {
    where?: OfferingWhereInput;
    orderBy?: OfferingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OfferingConnection {
  pageInfo: PageInfo;
  edges: OfferingEdge[];
}

export interface OfferingConnectionPromise
  extends Promise<OfferingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferingEdge>>() => T;
  aggregate: <T = AggregateOfferingPromise>() => T;
}

export interface OfferingConnectionSubscription
  extends Promise<AsyncIterator<OfferingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferingSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferingEdge {
  node: Offering;
  cursor: String;
}

export interface OfferingEdgePromise
  extends Promise<OfferingEdge>,
    Fragmentable {
  node: <T = OfferingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferingEdgeSubscription
  extends Promise<AsyncIterator<OfferingEdge>>,
    Fragmentable {
  node: <T = OfferingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOffering {
  count: Int;
}

export interface AggregateOfferingPromise
  extends Promise<AggregateOffering>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferingSubscription
  extends Promise<AsyncIterator<AggregateOffering>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface OfferingSubscriptionPayload {
  mutation: MutationType;
  node: Offering;
  updatedFields: String[];
  previousValues: OfferingPreviousValues;
}

export interface OfferingSubscriptionPayloadPromise
  extends Promise<OfferingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferingPreviousValuesPromise>() => T;
}

export interface OfferingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferingPreviousValuesSubscription>() => T;
}

export interface OfferingPreviousValues {
  id: ID_Output;
  type: String;
  category: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OfferingPreviousValuesPromise
  extends Promise<OfferingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  category: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OfferingPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  nom: String;
  prenom: String;
  numero: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nom: () => Promise<String>;
  prenom: () => Promise<String>;
  numero: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nom: () => Promise<AsyncIterator<String>>;
  prenom: () => Promise<AsyncIterator<String>>;
  numero: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Offering",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
